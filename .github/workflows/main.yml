name: Nimble-CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
  workflow_dispatch:

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '/destroy') && !contains(github.event.head_commit.message, '/apply')}}
    runs-on: ubuntu-latest        
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: marceloprado/has-changed-path@v1
        id: app-changes
        with:
          paths: 'app/**'   
          
      - name: Configure AWS credentials
        if: steps.app-changes.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        if: steps.app-changes.outputs.changed == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        if: steps.app-changes.outputs.changed == 'true'
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: 'latest' #${{ steps.vars.outputs.tag }}
        run: |
          cd app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Download task definition
        if: steps.app-changes.outputs.changed == 'true'
        run: |
          aws ecs describe-task-definition --task-definition nimbleapp-task \
          --query taskDefinition > task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        if: steps.app-changes.outputs.changed == 'true'
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: nimbleapp
          image: ${{ steps.build-image.outputs.image }}
      
      - name: Deploy Amazon ECS task definition
        if: steps.app-changes.outputs.changed == 'true'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true   
        
  terraform:
    if: ${{ !contains(github.event.head_commit.message, '/destroy') && !contains(github.event.head_commit.message, '/apply')}}
    needs: build
    name: 'Terraform'
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: marceloprado/has-changed-path@v1
        id: infra-changes
        with:
          paths: '**.tf'
          
      - name: Configure AWS Credentials
        if: steps.infra-changes.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        if: steps.infra-changes.outputs.changed == 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}        
          
      - name: Terraform Format
        if: steps.infra-changes.outputs.changed == 'true'
        id: fmt
        run: terraform fmt -check
        
      - name: Terraform Init
        if: steps.infra-changes.outputs.changed == 'true'
        id: init
        run: terraform init
        
      - name: Terraform Validate
        if: steps.infra-changes.outputs.changed == 'true'
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Plan
        if: steps.infra-changes.outputs.changed == 'true'
        id: plan        
        run: terraform plan -no-color
        continue-on-error: true
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply
        if: steps.infra-changes.outputs.changed == 'true'
        run: terraform apply -auto-approve
  terraform-apply:
    name: 'Terraform-Apply'
    runs-on: ubuntu-latest
    if: ${{contains(github.event.head_commit.message, '/apply')}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}        
          
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        
      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Plan
        id: plan        
        run: terraform plan -no-color
        continue-on-error: true
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply        
        run: terraform apply -auto-approve
        
  terraform-destroy:    
    name: 'Terraform-Destroy'
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, '/destroy') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}        

      - name: Terraform Init
        id: init
        run: terraform init
                  
      - name: Terraform Destroy        
        run: terraform destroy -auto-approve
