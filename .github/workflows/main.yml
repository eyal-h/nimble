name: Nimble-CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/**'
  workflow_dispatch:

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '/destroy') && !contains(github.event.head_commit.message, '/apply')}}
    runs-on: ubuntu-latest        
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: marceloprado/has-changed-path@v1
        id: app-changes
        with:
          paths: 'app/**'
      - name: go get
        run: |
          git config --global url."https://${{ secrets.PAT }}:x-oauth-basic@github.com/".insteadOf "https://github.com/"
          go get -v -u ./...
          
      - name: Login to Docker Hub
        if: steps.app-changes.outputs.changed == 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.app-changes.outputs.changed == 'true'
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push
        if: steps.app-changes.outputs.changed == 'true'
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./app
          file: ./app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/test-app:latest

      - name: Image digest
        if: steps.app-changes.outputs.changed == 'true'
        run: echo ${{ steps.docker_build.outputs.digest }}
        
  terraform:
    if: ${{ !contains(github.event.head_commit.message, '/destroy') && !contains(github.event.head_commit.message, '/apply')}}
    needs: build
    name: 'Terraform'
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: marceloprado/has-changed-path@v1
        id: infra-changes
        with:
          paths: '**.tf'
          
      - name: Configure AWS Credentials
        if: steps.infra-changes.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        if: steps.infra-changes.outputs.changed == 'true'
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}        
          
      - name: Terraform Format
        if: steps.infra-changes.outputs.changed == 'true'
        id: fmt
        run: terraform fmt -check
        
      - name: Terraform Init
        if: steps.infra-changes.outputs.changed == 'true'
        id: init
        run: terraform init
        
      - name: Terraform Validate
        if: steps.infra-changes.outputs.changed == 'true'
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Plan
        if: steps.infra-changes.outputs.changed == 'true'
        id: plan        
        run: terraform plan -no-color
        continue-on-error: true
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply
        if: steps.infra-changes.outputs.changed == 'true'
        run: terraform apply -auto-approve
  terraform-apply:
    name: 'Terraform-Apply'
    runs-on: ubuntu-latest
    if: ${{contains(github.event.head_commit.message, '/apply')}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}        
          
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        
      - name: Terraform Init
        id: init
        run: terraform init
        
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        
      - name: Terraform Plan
        id: plan        
        run: terraform plan -no-color
        continue-on-error: true
        
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply        
        run: terraform apply -auto-approve
        
  terraform-destroy:    
    name: 'Terraform-Destroy'
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, '/destroy') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}        

      - name: Terraform Init
        id: init
        run: terraform init
                  
      - name: Terraform Destroy        
        run: terraform destroy -auto-approve
